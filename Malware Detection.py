import pandas as pd
import numpy as np
from datetime import datetime as dt
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.api import VAR
from scipy.stats import pearsonr
import gc

from sklearn.metrics import confusion_matrix as cm
from sklearn.linear_model import LogisticRegression as lr
from sklearn.model_selection import train_test_split as tts
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score, plot_roc_curve
import xgboost as xgb
from sklearn.model_selection import KFold #for K-fold cross validation

import lightgbm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer

samplesub = pd.read_csv("sample_submission.csv")
traindata = pd.read_csv("train.csv")
testdata = pd.read_csv("test.csv")

samplesub.head()

#############################################################################################################

# TRAIN DATA

traindata.head()

objectDf = traindata[traindata.columns[traindata.isnull().mean()<.75]]
objectDf.info()

objectDf['IsProtected']=objectDf['IsProtected'].fillna(1)
objectDf['Firewall']=objectDf['Firewall'].fillna(1)
objectDf['Census_IsVirtualDevice']=objectDf['Census_IsVirtualDevice'].fillna(0)
objectDf['Census_IsAlwaysOnAlwaysConnectedCapable']=objectDf['Census_IsAlwaysOnAlwaysConnectedCapable'].fillna(0)
objectDf['Wdft_IsGamer']=objectDf['Wdft_IsGamer'].fillna(0)

objectDf['Census_InternalBatteryType']=objectDf['Census_InternalBatteryType'].fillna('lion')
objectDf['Census_PowerPlatformRoleName']=objectDf['Census_PowerPlatformRoleName'].fillna('Mobile')
objectDf['Census_ChassisTypeName']=objectDf['Census_ChassisTypeName'].fillna('Notebook')
objectDf['Census_PrimaryDiskTypeName']=objectDf['Census_PrimaryDiskTypeName'].fillna('HDD')
objectDf['SmartScreen']=objectDf['SmartScreen'].fillna('RequireAdmin')

objectDf['RtpStateBitfield']=objectDf['RtpStateBitfield'].fillna(7.0)
objectDf['AVProductStatesIdentifier']=objectDf['AVProductStatesIdentifier'].fillna(53447.0)
objectDf['AVProductsInstalled']=objectDf['AVProductsInstalled'].fillna(1.0)
objectDf['AVProductsEnabled']=objectDf['AVProductsEnabled'].fillna(1.0)
objectDf['CityIdentifier']=objectDf['CityIdentifier'].fillna(130775.0)
objectDf['OrganizationIdentifier']=objectDf['OrganizationIdentifier'].fillna(27.0)
objectDf['GeoNameIdentifier']=objectDf['GeoNameIdentifier'].fillna(277.0)
objectDf['IsProtected']=objectDf['IsProtected'].fillna(1.0)
objectDf['SMode']=objectDf['SMode'].fillna(0)
objectDf['IeVerIdentifier']=objectDf['IeVerIdentifier'].fillna(137.0)
objectDf['Firewall']=objectDf['Firewall'].fillna(1)
objectDf['UacLuaenable']=objectDf['UacLuaenable'].fillna(1)
objectDf['Census_OEMNameIdentifier']=objectDf['Census_OEMNameIdentifier'].fillna(2668.0)
objectDf['Census_OEMModelIdentifier']=objectDf['Census_OEMModelIdentifier'].fillna(313586.0)
objectDf['Census_ProcessorCoreCount']=objectDf['Census_ProcessorCoreCount'].fillna(4.0)
objectDf['Census_ProcessorManufacturerIdentifier']=objectDf['Census_ProcessorManufacturerIdentifier'].fillna(5.0)
objectDf['Census_ProcessorModelIdentifier']=objectDf['Census_ProcessorModelIdentifier'].fillna(1998.0)
objectDf['Census_PrimaryDiskTotalCapacity']=objectDf['Census_PrimaryDiskTotalCapacity'].fillna(476940.0)
objectDf['Census_SystemVolumeTotalCapacity']=objectDf['Census_SystemVolumeTotalCapacity'].fillna(28542.0)
objectDf['Census_TotalPhysicalRAM']=objectDf['Census_TotalPhysicalRAM'].fillna(4096.0)
objectDf['Census_InternalPrimaryDiagonalDisplaySizeInInches']=objectDf['Census_InternalPrimaryDiagonalDisplaySizeInInches'].fillna(15.5)
objectDf['Census_InternalPrimaryDisplayResolutionHorizontal']=objectDf['Census_InternalPrimaryDisplayResolutionHorizontal'].fillna(1366.0)
objectDf['Census_InternalPrimaryDisplayResolutionVertical']=objectDf['Census_InternalPrimaryDisplayResolutionVertical'].fillna(768.0)
objectDf['Census_InternalBatteryNumberOfCharges']=objectDf['Census_InternalBatteryNumberOfCharges'].fillna(0)
objectDf['Census_OSInstallLanguageIdentifier']=objectDf['Census_OSInstallLanguageIdentifier'].fillna(8.0)
objectDf['Census_IsFlightsDisabled']=objectDf['Census_IsFlightsDisabled'].fillna(0)
objectDf['Census_ThresholdOptIn']=objectDf['Census_ThresholdOptIn'].fillna(0)
objectDf['Census_FirmwareManufacturerIdentifier']=objectDf['Census_FirmwareManufacturerIdentifier'].fillna(142.0)
objectDf['Census_FirmwareVersionIdentifier']=objectDf['Census_FirmwareVersionIdentifier'].fillna(33105.0)
objectDf['Census_IsWIMBootEnabled']=objectDf['Census_IsWIMBootEnabled'].fillna(0)
objectDf['Census_IsVirtualDevice']=objectDf['Census_IsVirtualDevice'].fillna(0)
objectDf['Census_IsAlwaysOnAlwaysConnectedCapable']=objectDf['Census_IsAlwaysOnAlwaysConnectedCapable'].fillna(0)
objectDf['Wdft_IsGamer']=objectDf['Wdft_IsGamer'].fillna(0)
objectDf['Wdft_RegionIdentifier']=objectDf['Wdft_RegionIdentifier'].fillna(10.0)

objectDf.info()

#Reduce the memory usage - Inspired by Panchajanya Banerjee
def reduce_mem_usage(df, verbose=True):
    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    start_mem = df.memory_usage().sum() / 1024**2    
    for col in df.columns:
        col_type = df[col].dtypes
        if col_type in numerics:
            c_min = df[col].min()
            c_max = df[col].max()
            if str(col_type)[:3] == 'int':
                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                    df[col] = df[col].astype(np.int8)
                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                    df[col] = df[col].astype(np.int16)
                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                    df[col] = df[col].astype(np.int32)
                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                    df[col] = df[col].astype(np.int64)  
            else:
                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                    df[col] = df[col].astype(np.float16)
                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                    df[col] = df[col].astype(np.float32)
                else:
                    df[col] = df[col].astype(np.float64)    
    end_mem = df.memory_usage().sum() / 1024**2
    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
    return df

objectDf = reduce_mem_usage(objectDf)

objectDf['MachineIdentifier'].value_counts(sort=True, ascending=False)
#all unique values

objectDf['MachineIdentifier_ID']=pd.factorize(objectDf.MachineIdentifier, sort='True')[0]
objectDf.head()

objectDf['ProductName'].value_counts(sort=True, ascending=False)

objectDf['ProductName_ID']=pd.factorize(objectDf.ProductName, sort='True')[0]
objectDf.head()

objectDf['EngineVersion'].value_counts(sort=True, ascending=False)

objectDf['EngineVersion_ID']=pd.factorize(objectDf.EngineVersion, sort='True')[0]
objectDf.head()

objectDf['AppVersion'].value_counts(sort=True, ascending=False)

objectDf['AppVersion_ID']=pd.factorize(objectDf.AppVersion, sort='True')[0]
objectDf.head()

objectDf['AvSigVersion'].value_counts(sort=True, ascending=False)

objectDf['AvSigVersion_ID']=pd.factorize(objectDf.AvSigVersion, sort='True')[0]
objectDf.head()

objectDf['Platform'].value_counts(sort=True, ascending=False)

objectDf['Platform_ID']=pd.factorize(objectDf.Platform, sort='True')[0]
objectDf.head()

objectDf['Processor'].value_counts(sort=True, ascending=False)

objectDf['Processor_ID']=pd.factorize(objectDf.Processor, sort='True')[0]
objectDf.head()

objectDf['OsVer'].value_counts(sort=True, ascending=False)

objectDf['OsVer_ID']=pd.factorize(objectDf.OsVer, sort='True')[0]
objectDf.head()

objectDf['OsPlatformSubRelease'].value_counts(sort=True, ascending=False)

objectDf['OsPlatformSubRelease_ID']=pd.factorize(objectDf.OsPlatformSubRelease, sort='True')[0]
objectDf.head()

objectDf['OsBuildLab'].value_counts(sort=True, ascending=False)

objectDf['OsBuildLab_ID']=pd.factorize(objectDf.OsBuildLab, sort='True')[0]
objectDf.head()

objectDf['SkuEdition'].value_counts(sort=True, ascending=False)

objectDf['SkuEdition_ID']=pd.factorize(objectDf.SkuEdition, sort='True')[0]
objectDf.head()

objectDf['SmartScreen'].value_counts(sort=True, ascending=False)

objectDf['SmartScreen1']=objectDf['SmartScreen'].str.lower()
objectDf['SmartScreen1'].value_counts(sort=True, ascending=False)
#drop SmartScreen and take SmartScreen1

objectDf['SmartScreen_ID']=pd.factorize(objectDf.SmartScreen1, sort='True')[0]
objectDf.head()

objectDf['Census_MDC2FormFactor'].value_counts(sort=True, ascending=False)

objectDf['Census_MDC2FormFactor_ID']=pd.factorize(objectDf.Census_MDC2FormFactor, sort='True')[0]
objectDf.head()

objectDf['Census_DeviceFamily'].value_counts(sort=True, ascending=False)

objectDf['Census_DeviceFamily_ID']=pd.factorize(objectDf.Census_DeviceFamily, sort='True')[0]
objectDf.head()

objectDf['Census_PrimaryDiskTypeName'].value_counts(sort=True, ascending=False)

objectDf['Census_PrimaryDiskTypeName_ID']=pd.factorize(objectDf.Census_PrimaryDiskTypeName, sort='True')[0]
objectDf.head()

objectDf['Census_ChassisTypeName'].value_counts(sort=True, ascending=False)
#both number & string values

objectDf['Census_ChassisTypeName_ID']=pd.factorize(objectDf.Census_ChassisTypeName, sort='True')[0]
objectDf.head()

objectDf['Census_PowerPlatformRoleName'].value_counts(sort=True, ascending=False)

objectDf['Census_PowerPlatformRoleName_ID']=pd.factorize(objectDf.Census_PowerPlatformRoleName, sort='True')[0]
objectDf.head()

objectDf['Census_InternalBatteryType'].value_counts(sort=True, ascending=False)

objectDf['Census_InternalBatteryType_ID']=pd.factorize(objectDf.Census_InternalBatteryType, sort='True')[0]
objectDf.head()

objectDf['Census_OSVersion'].value_counts(sort=True, ascending=False)

objectDf['Census_OSVersion_ID']=pd.factorize(objectDf.Census_OSVersion, sort='True')[0]
objectDf.head()

objectDf['Census_OSArchitecture'].value_counts(sort=True, ascending=False)

objectDf['Census_OSArchitecture_ID']=pd.factorize(objectDf.Census_OSArchitecture, sort='True')[0]
objectDf.head()

objectDf['Census_OSBranch'].value_counts(sort=True, ascending=False)

objectDf['Census_OSBranch_ID']=pd.factorize(objectDf.Census_OSBranch, sort='True')[0]
objectDf.head()

objectDf['Census_OSEdition'].value_counts(sort=True, ascending=False)

objectDf['Census_OSEdition_ID']=pd.factorize(objectDf.Census_OSEdition, sort='True')[0]
objectDf.head()

objectDf['Census_OSSkuName'].value_counts(sort=True, ascending=False)

objectDf['Census_OSSkuName_ID']=pd.factorize(objectDf.Census_OSSkuName, sort='True')[0]
objectDf.head()

objectDf['Census_OSInstallTypeName'].value_counts(sort=True, ascending=False)

objectDf['Census_OSInstallTypeName_ID']=pd.factorize(objectDf.Census_OSInstallTypeName, sort='True')[0]
objectDf.head()

objectDf['Census_OSWUAutoUpdateOptionsName'].value_counts(sort=True, ascending=False)

objectDf['Census_OSWUAutoUpdateOptionsName_ID']=pd.factorize(objectDf.Census_OSWUAutoUpdateOptionsName, sort='True')[0]
objectDf.head()

objectDf['Census_GenuineStateName'].value_counts(sort=True, ascending=False)

objectDf['Census_GenuineStateName_ID']=pd.factorize(objectDf.Census_GenuineStateName, sort='True')[0]
objectDf.head()

objectDf['Census_ActivationChannel'].value_counts(sort=True, ascending=False)

objectDf['Census_ActivationChannel_ID']=pd.factorize(objectDf.Census_ActivationChannel, sort='True')[0]
objectDf.head()

objectDf['Census_FlightRing'].value_counts(sort=True, ascending=False)

objectDf['Census_FlightRing_ID']=pd.factorize(objectDf.Census_FlightRing, sort='True')[0]
pd.set_option('display.max_columns', None)
objectDf.head()

objectDf.hist(figsize = (14,18))
plt.show()















# TEST DATA

testdata.head()

objectDf1=testdata[testdata.columns[testdata.isnull().mean()<.75]]
objectDf1.info()

objectDf1['IsProtected']=objectDf1['IsProtected'].fillna(1)
objectDf1['Firewall']=objectDf1['Firewall'].fillna(1)
objectDf1['Census_IsVirtualDevice']=objectDf1['Census_IsVirtualDevice'].fillna(0)
objectDf1['Census_IsAlwaysOnAlwaysConnectedCapable']=objectDf1['Census_IsAlwaysOnAlwaysConnectedCapable'].fillna(0)
objectDf1['Wdft_IsGamer']=objectDf1['Wdft_IsGamer'].fillna(0)

objectDf1['Census_InternalBatteryType']=objectDf1['Census_InternalBatteryType'].fillna('lion')
objectDf1['Census_PowerPlatformRoleName']=objectDf1['Census_PowerPlatformRoleName'].fillna('Mobile')
objectDf1['Census_ChassisTypeName']=objectDf1['Census_ChassisTypeName'].fillna('Notebook')
objectDf1['Census_PrimaryDiskTypeName']=objectDf1['Census_PrimaryDiskTypeName'].fillna('HDD')
objectDf1['SmartScreen']=objectDf1['SmartScreen'].fillna('RequireAdmin')

objectDf1['RtpStateBitfield']=objectDf1['RtpStateBitfield'].fillna(7.0)
objectDf1['AVProductStatesIdentifier']=objectDf1['AVProductStatesIdentifier'].fillna(53447.0)
objectDf1['AVProductsInstalled']=objectDf1['AVProductsInstalled'].fillna(1.0)
objectDf1['AVProductsEnabled']=objectDf1['AVProductsEnabled'].fillna(1.0)
objectDf1['CityIdentifier']=objectDf1['CityIdentifier'].fillna(130775.0)
objectDf1['OrganizationIdentifier']=objectDf1['OrganizationIdentifier'].fillna(27.0)
objectDf1['GeoNameIdentifier']=objectDf1['GeoNameIdentifier'].fillna(277.0)
objectDf1['IsProtected']=objectDf1['IsProtected'].fillna(1.0)
objectDf1['SMode']=objectDf1['SMode'].fillna(0)
objectDf1['IeVerIdentifier']=objectDf1['IeVerIdentifier'].fillna(137.0)
objectDf1['Firewall']=objectDf1['Firewall'].fillna(1)
objectDf1['UacLuaenable']=objectDf1['UacLuaenable'].fillna(1)
objectDf1['Census_OEMNameIdentifier']=objectDf1['Census_OEMNameIdentifier'].fillna(2668.0)
objectDf1['Census_OEMModelIdentifier']=objectDf1['Census_OEMModelIdentifier'].fillna(313586.0)
objectDf1['Census_ProcessorCoreCount']=objectDf1['Census_ProcessorCoreCount'].fillna(4.0)
objectDf1['Census_ProcessorManufacturerIdentifier']=objectDf1['Census_ProcessorManufacturerIdentifier'].fillna(5.0)
objectDf1['Census_ProcessorModelIdentifier']=objectDf1['Census_ProcessorModelIdentifier'].fillna(1998.0)
objectDf1['Census_PrimaryDiskTotalCapacity']=objectDf1['Census_PrimaryDiskTotalCapacity'].fillna(476940.0)
objectDf1['Census_SystemVolumeTotalCapacity']=objectDf1['Census_SystemVolumeTotalCapacity'].fillna(28542.0)
objectDf1['Census_TotalPhysicalRAM']=objectDf1['Census_TotalPhysicalRAM'].fillna(4096.0)
objectDf1['Census_InternalPrimaryDiagonalDisplaySizeInInches']=objectDf1['Census_InternalPrimaryDiagonalDisplaySizeInInches'].fillna(15.5)
objectDf1['Census_InternalPrimaryDisplayResolutionHorizontal']=objectDf1['Census_InternalPrimaryDisplayResolutionHorizontal'].fillna(1366.0)
objectDf1['Census_InternalPrimaryDisplayResolutionVertical']=objectDf1['Census_InternalPrimaryDisplayResolutionVertical'].fillna(768.0)
objectDf1['Census_InternalBatteryNumberOfCharges']=objectDf1['Census_InternalBatteryNumberOfCharges'].fillna(0)
objectDf1['Census_OSInstallLanguageIdentifier']=objectDf1['Census_OSInstallLanguageIdentifier'].fillna(8.0)
objectDf1['Census_IsFlightsDisabled']=objectDf1['Census_IsFlightsDisabled'].fillna(0)
objectDf1['Census_ThresholdOptIn']=objectDf1['Census_ThresholdOptIn'].fillna(0)
objectDf1['Census_FirmwareManufacturerIdentifier']=objectDf1['Census_FirmwareManufacturerIdentifier'].fillna(142.0)
objectDf1['Census_FirmwareVersionIdentifier']=objectDf1['Census_FirmwareVersionIdentifier'].fillna(33105.0)
objectDf1['Census_IsWIMBootEnabled']=objectDf1['Census_IsWIMBootEnabled'].fillna(0)
objectDf1['Census_IsVirtualDevice']=objectDf1['Census_IsVirtualDevice'].fillna(0)
objectDf1['Census_IsAlwaysOnAlwaysConnectedCapable']=objectDf1['Census_IsAlwaysOnAlwaysConnectedCapable'].fillna(0)
objectDf1['Wdft_IsGamer']=objectDf1['Wdft_IsGamer'].fillna(0)
objectDf1['Wdft_RegionIdentifier']=objectDf1['Wdft_RegionIdentifier'].fillna(10.0)

objectDf1.info()

objectDf1 = reduce_mem_usage(objectDf1)

identifierDf = objectDf[['MachineIdentifier','MachineIdentifier_ID']]
trainDf=objectDf[['MachineIdentifier','MachineIdentifier_ID']]
trainDf1=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf1,how='left',on=['MachineIdentifier'])
objectDf1.head()

trainDf=objectDf[['ProductName','ProductName_ID']]
trainDf2=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf2,how='left',on=['ProductName'])
objectDf1.head()



objectDf1['SmartScreen1']=objectDf1['SmartScreen'].str.lower()
objectDf1['SmartScreen1'].value_counts(sort=True, ascending=False)

trainDf=objectDf[['EngineVersion','EngineVersion_ID']]
trainDf3=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf3,how='left',on=['EngineVersion'])


trainDf=objectDf[['AppVersion','AppVersion_ID']]
trainDf4=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf4,how='left',on=['AppVersion'])


trainDf=objectDf[['AvSigVersion','AvSigVersion_ID']]
trainDf5=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf5,how='left',on=['AvSigVersion'])


trainDf=objectDf[['Platform','Platform_ID']]
trainDf6=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf6,how='left',on=['Platform'])


trainDf=objectDf[['Processor','Processor_ID']]
trainDf7=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf7,how='left',on=['Processor'])


trainDf=objectDf[['OsVer','OsVer_ID']]
trainDf8=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf8,how='left',on=['OsVer'])


trainDf=objectDf[['OsPlatformSubRelease','OsPlatformSubRelease_ID']]
trainDf9=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf9,how='left',on=['OsPlatformSubRelease'])


trainDf=objectDf[['OsBuildLab','OsBuildLab_ID']]
trainDf10=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf10,how='left',on=['OsBuildLab'])


trainDf=objectDf[['SkuEdition','SkuEdition_ID']]
trainDf11=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf11,how='left',on=['SkuEdition'])


trainDf=objectDf[['SmartScreen1','SmartScreen_ID']]
trainDf12=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf12,how='left',on=['SmartScreen1'])


trainDf=objectDf[['Census_MDC2FormFactor','Census_MDC2FormFactor_ID']]
trainDf13=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf13,how='left',on=['Census_MDC2FormFactor'])


trainDf=objectDf[['Census_DeviceFamily','Census_DeviceFamily_ID']]
trainDf14=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf14,how='left',on=['Census_DeviceFamily'])


trainDf=objectDf[['Census_PrimaryDiskTypeName','Census_PrimaryDiskTypeName_ID']]
trainDf15=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf15,how='left',on=['Census_PrimaryDiskTypeName'])


trainDf=objectDf[['Census_ChassisTypeName','Census_ChassisTypeName_ID']]
trainDf16=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf16,how='left',on=['Census_ChassisTypeName'])


trainDf=objectDf[['Census_PowerPlatformRoleName','Census_PowerPlatformRoleName_ID']]
trainDf17=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf17,how='left',on=['Census_PowerPlatformRoleName'])


trainDf=objectDf[['Census_InternalBatteryType','Census_InternalBatteryType_ID']]
trainDf18=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf18,how='left',on=['Census_InternalBatteryType'])


trainDf=objectDf[['Census_OSVersion','Census_OSVersion_ID']]
trainDf19=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf19,how='left',on=['Census_OSVersion'])


trainDf=objectDf[['Census_OSArchitecture','Census_OSArchitecture_ID']]
trainDf20=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf20,how='left',on=['Census_OSArchitecture'])


trainDf=objectDf[['Census_OSBranch','Census_OSBranch_ID']]
trainDf21=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf21,how='left',on=['Census_OSBranch'])


trainDf=objectDf[['Census_OSEdition','Census_OSEdition_ID']]
trainDf22=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf22,how='left',on=['Census_OSEdition'])


trainDf=objectDf[['Census_OSSkuName','Census_OSSkuName_ID']]
trainDf23=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf23,how='left',on=['Census_OSSkuName'])


trainDf=objectDf[['Census_OSInstallTypeName','Census_OSInstallTypeName_ID']]
trainDf24=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf24,how='left',on=['Census_OSInstallTypeName'])


trainDf=objectDf[['Census_OSWUAutoUpdateOptionsName','Census_OSWUAutoUpdateOptionsName_ID']]
trainDf25=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf25,how='left',on=['Census_OSWUAutoUpdateOptionsName'])


trainDf=objectDf[['Census_GenuineStateName','Census_GenuineStateName_ID']]
trainDf26=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf26,how='left',on=['Census_GenuineStateName'])


trainDf=objectDf[['Census_ActivationChannel','Census_ActivationChannel_ID']]
trainDf27=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf27,how='left',on=['Census_ActivationChannel'])


trainDf=objectDf[['Census_FlightRing','Census_FlightRing_ID']]
trainDf28=trainDf.drop_duplicates().reset_index(drop=True)
objectDf1 = pd.merge(objectDf1,trainDf28,how='left',on=['Census_FlightRing'])
objectDf1.head()

####################################################################################

objectDf1.info()

trainDf = objectDf[['EngineVersion_ID','AppVersion_ID','AvSigVersion_ID','Processor_ID','OsPlatformSubRelease_ID','OsBuildLab_ID','SkuEdition_ID','SmartScreen_ID','Census_MDC2FormFactor_ID','Census_PrimaryDiskTypeName_ID','Census_ChassisTypeName_ID','Census_PowerPlatformRoleName_ID','Census_InternalBatteryType_ID','Census_OSVersion_ID','Census_OSArchitecture_ID','Census_OSBranch_ID','Census_OSEdition_ID','Census_OSSkuName_ID','Census_OSInstallTypeName_ID','Census_OSWUAutoUpdateOptionsName_ID','Census_GenuineStateName_ID','Census_ActivationChannel_ID','Census_FlightRing_ID',
                   'AVProductStatesIdentifier','AVProductsInstalled','CountryIdentifier','CityIdentifier','OrganizationIdentifier','GeoNameIdentifier','LocaleEnglishNameIdentifier','OsBuild','OsSuite','IeVerIdentifier','Census_OEMNameIdentifier','Census_OEMModelIdentifier','Census_ProcessorModelIdentifier','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical','Census_OSBuildNumber','Census_OSInstallLanguageIdentifier','Census_OSUILocaleIdentifier','Census_FirmwareManufacturerIdentifier','Census_FirmwareVersionIdentifier','Wdft_RegionIdentifier',
                   'IsSxsPassiveMode','HasTpm','IsProtected','Firewall','Census_HasOpticalDiskDrive','Census_IsSecureBootEnabled','Census_IsVirtualDevice','Census_IsTouchEnabled','Census_IsPenCapable','Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_IsGamer','HasDetections']]

testDf = objectDf1[['EngineVersion_ID','AppVersion_ID','AvSigVersion_ID','Processor_ID','OsPlatformSubRelease_ID','OsBuildLab_ID','SkuEdition_ID','SmartScreen_ID','Census_MDC2FormFactor_ID','Census_PrimaryDiskTypeName_ID','Census_ChassisTypeName_ID','Census_PowerPlatformRoleName_ID','Census_InternalBatteryType_ID','Census_OSVersion_ID','Census_OSArchitecture_ID','Census_OSBranch_ID','Census_OSEdition_ID','Census_OSSkuName_ID','Census_OSInstallTypeName_ID','Census_OSWUAutoUpdateOptionsName_ID','Census_GenuineStateName_ID','Census_ActivationChannel_ID','Census_FlightRing_ID',
                   'AVProductStatesIdentifier','AVProductsInstalled','CountryIdentifier','CityIdentifier','OrganizationIdentifier','GeoNameIdentifier','LocaleEnglishNameIdentifier','OsBuild','OsSuite','IeVerIdentifier','Census_OEMNameIdentifier','Census_OEMModelIdentifier','Census_ProcessorModelIdentifier','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical','Census_OSBuildNumber','Census_OSInstallLanguageIdentifier','Census_OSUILocaleIdentifier','Census_FirmwareManufacturerIdentifier','Census_FirmwareVersionIdentifier','Wdft_RegionIdentifier',
                   'IsSxsPassiveMode','HasTpm','IsProtected','Firewall','Census_HasOpticalDiskDrive','Census_IsSecureBootEnabled','Census_IsVirtualDevice','Census_IsTouchEnabled','Census_IsPenCapable','Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_IsGamer']]

trainDf.head()

testDf.head()

######################################################################





trainDf1=trainDf

label = trainDf.HasDetections
trainDf=trainDf.drop(columns = ["HasDetections"])

scaler = StandardScaler()
trainDf = scaler.fit_transform(trainDf)

trainDf

X_train, X_test, y_train, y_test = tts(trainDf, label, test_size=0.2, random_state=42, stratify=label)

classifier = lr(random_state=42, max_iter=500, verbose=1).fit(X_train, y_train)

classifier.predict(X_test)

classifier.score(X_test, y_test)

# AUROC

probabilities = classifier.predict_proba(X_test)

pred = pd.DataFrame(np.around(probabilities, decimals=4), columns = ["0", "1"])
pred

thresh7 = pred["1"].apply(lambda x: 1 if x > 0.8 else 0)
thresh8 = pred["1"].apply(lambda x: 1 if x > 0.8 else 0)
new = pd.concat([pred, thresh7, thresh8], axis = 1)
new.head()

plot_roc_curve(classifier, X_test, y_test)


# MODEL

### Applying Light GMB

train = reduce_mem_usage(trainDf1)
test = reduce_mem_usage(testDf)

target = train['HasDetections']
del train['HasDetections']

y = target.values
x = train.values

# Create training and validation sets
x, x_test, y, y_test = train_test_split(x, y, test_size=0.2, random_state=42, stratify=y)

categorical_features = [c for c, col in enumerate(train.columns) if 'cat' in col]

train_data = lightgbm.Dataset(x, label=y, categorical_feature=categorical_features)
test_data = lightgbm.Dataset(x_test, label=y_test)

parameters = {
    'application': 'binary',
    'objective': 'binary',
    'metric': 'auc',
    'is_unbalance': 'true',
    'boosting': 'gbdt',
    'num_leaves': 31,
    'feature_fraction': 0.5,
    'bagging_fraction': 0.5,
    'bagging_freq': 20,
    'learning_rate': 0.05,
    'verbose': 0
}

model = lightgbm.train(parameters,
                       train_data,
                       valid_sets=test_data,
                       num_boost_round=5000,
                       early_stopping_rounds=100)

MachineIdentifier = objectDf1['MachineIdentifier'].values

x = test.values
y = model.predict(x)

output = pd.DataFrame({'MachineIdentifier': MachineIdentifier, 'HasDetections': y})
output.info()

output.head()

output["HasDetections"].round()

output.to_csv('submissionFile1.csv', index=False, float_format=None)


